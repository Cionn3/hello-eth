//! A Swap Router that can be used to do swap simulations on Uniswap V2 & V3 Pools

 use alloy_sol_types::{sol, SolCall};
 use revm::primitives::{Bytecode, U256, Bytes};
 use SwapRouter::Params;

 /// Depolyed Bytecode of the SwapRouter contract
 const BYTECODE: &str = "0x608060408181526004908136101561001f575b505050361561001d57005b005b600092833560e01c90816385a38be41461020b575063fa461e33036100125734610207576060366003190112610207576044359067ffffffffffffffff8083116101ff57366023840112156101ff57828401359081116101ff5782013660248201116101ff578260a091031261020357602482013580151581036101ff576100a9604484016109b2565b906100b6606485016109b2565b9260a46100c5608487016109b2565b9501359262ffffff84168094036101e9576001600160a01b0380809216961693818351967f1698ee82000000000000000000000000000000000000000000000000000000008852888a8901521660248701526044860152602085606481731f98431c8ad98523631ae4a59f267346ea31f9845afa9485156101f55788956101b4575b508416330361017257501561016457610161933592610a63565b80f35b610161935060243592610a63565b5162461bcd60e51b8152602081870152600c60248201527f4e6f742074686520706f6f6c00000000000000000000000000000000000000006044820152606490fd5b9094506020813d6020116101ed575b816101d0602093836109c6565b810103126101e9575184811681036101e9579338610147565b8780fd5b3d91506101c3565b82513d8a823e3d90fd5b8480fd5b8380fd5b8280fd5b929050346102035760e03660031901126102035783839450836001600160a01b03806102356109fe565b16907f70a082310000000000000000000000000000000000000000000000000000000091828452338685015260209889916024998a915afa9283156109a8578493610979575b506084358061076557506102a581610291610a14565b1661029a610a2a565b604435913390610a63565b846060826102b1610a2a565b168851928380927f0902f1ac0000000000000000000000000000000000000000000000000000000082525afa90811561075b5785908692610701575b506dffffffffffffffffffffffffffff918216911661030a610a14565b83806103146109fe565b16911610156106fc57905b82610328610a14565b168a848b610334610a2a565b8c5194859384928b8452168d8301525afa80156106f257839088906106bd575b61035e9250610a40565b801561065657821580158061064d575b156105e6576103e58083029280840482036105d4578402029282840414821517156105c2576103e88085029485041417156105b057820180921161059e57811561058c57046103bb610a14565b82806103c56109fe565b169116101561058557845b826103d9610a2a565b168851918b83019267ffffffffffffffff9381811085821117610573578b52888152823b1561056f57918b91898b61045582968f51998a97889687957f022c0d9f000000000000000000000000000000000000000000000000000000008752860152840152336044840152608060648401526084830190610bb1565b03925af1801561056557908a93929161053c575b50506104736109fe565b169187875180948193825233898301525afa908115610532578391610500575b50915b5080156104f9576104a691610a40565b925b60c43584106104b957505051908152f35b601e9085606494519362461bcd60e51b85528401528201527f5265616c20416d6f756e74203c204d696e696d756d20526563656976656400006044820152fd5b50926104a8565b90508681813d831161052b575b61051781836109c6565b81010312610526575138610493565b600080fd5b503d61050d565b85513d85823e3d90fd5b908092969350116105535786529287903880610469565b8782604188634e487b7160e01b835252fd5b88513d88823e3d90fd5b8880fd5b8c8a60418d634e487b7160e01b835252fd5b84906103d0565b8886601289634e487b7160e01b835252fd5b8886601189634e487b7160e01b835252fd5b898760118a634e487b7160e01b835252fd5b8a8860118b634e487b7160e01b835252fd5b8c8a60118d634e487b7160e01b835252fd5b60848960288d8f8e519362461bcd60e51b85528401528201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152fd5b5082151561036e565b608488602b8c8e8d519362461bcd60e51b85528401528201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152fd5b50508a81813d83116106eb575b6106d481836109c6565b810103126106e7578261035e9151610354565b8680fd5b503d6106ca565b89513d89823e3d90fd5b61031f565b9150506060813d606011610753575b8161071d606093836109c6565b810103126101ff5761072e81610bf1565b8761073a8b8401610bf1565b92015163ffffffff81160361074f57386102ed565b8580fd5b3d9150610710565b87513d87823e3d90fd5b60010361093857610774610a14565b818061077e6109fe565b16911610801561091e576401000276ad5b82610798610a2a565b16906107a2610a14565b6107aa6109fe565b60a4359162ffffff831680930361091a578594939291878f979281938f51998a0152168d88015216606086015233608086015260a085015260a0845260c084019284841067ffffffffffffffff85111761090857838b527f128acb080000000000000000000000000000000000000000000000000000000084523360c486015260e4850152604435610104850152841661012484015260a061014484015288908290818960bf1987610860610164820182610bb1565b0301925af18015610565579188918b94936108d5575b5050506108816109fe565b169187875180948193825233898301525afa9081156105325783916108a8575b5091610496565b90508681813d83116108ce575b6108bf81836109c6565b810103126102075751386108a1565b503d6108b5565b909180939450903d8411610900575b816108ee916109c6565b81010312610203578790863880610876565b3d91506108e4565b8b8960418c634e487b7160e01b835252fd5b8980fd5b73fffd8963efd1fc6a506488495d951d5263988d2561078f565b6064856014898b8a519362461bcd60e51b85528401528201527f496e76616c696420706f6f6c2076617269616e740000000000000000000000006044820152fd5b9092508781813d83116109a1575b61099181836109c6565b810103126102035751913861027b565b503d610987565b86513d86823e3d90fd5b35906001600160a01b038216820361052657565b90601f8019910116810190811067ffffffffffffffff8211176109e857604052565b634e487b7160e01b600052604160045260246000fd5b6024356001600160a01b03811681036105265790565b6004356001600160a01b03811681036105265790565b6064356001600160a01b03811681036105265790565b91908203918211610a4d57565b634e487b7160e01b600052601160045260246000fd5b90916040519360208501937f23b872dd0000000000000000000000000000000000000000000000000000000085526001600160a01b039283809216602488015216604486015260648501526064845260a084019167ffffffffffffffff92858110848211176109e8576040521692600080938192519082875af13d15610ba4573d918211610b905790610b189160405191610b086020601f19601f84011601846109c6565b82523d84602084013e5b84610c0c565b908151918215159283610b61575b505050610b305750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b819293509060209181010312610b8c576020015190811591821503610b895750388080610b26565b80fd5b5080fd5b602483634e487b7160e01b81526041600452fd5b610b189150606090610b12565b919082519283825260005b848110610bdd575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610bbc565b51906dffffffffffffffffffffffffffff8216820361052657565b90610c4b5750805115610c2157805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580610c96575b610c5c575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b15610c5456fea26469706673582212205062a58e73ceeb4b5312576c62cd34bad1ffcbe1029f65880007c58ed502c7fb64736f6c63430008170033";


 sol! {
    contract SwapRouter {
        struct Params {
            address input_token;
            address output_token;
            uint256 amount_in;
            address pool;
            uint pool_variant;
            uint24 fee;
            uint256 minimum_received;
        }
        function do_swap(Params calldata params) external returns (uint256 real_amount);
    }
}

/// Encodes the swap parameters needed for [SwapRouter] contract
pub fn encode_swap(params: Params) -> Vec<u8> {
    let contract = SwapRouter::do_swapCall {
        params: Params {
            input_token: params.input_token,
            output_token: params.output_token,
            amount_in: params.amount_in,
            pool: params.pool,
            pool_variant: params.pool_variant,
            fee: params.fee,
            minimum_received: params.minimum_received,
        },
    };

    contract.abi_encode()
}

/// Decodes the output of the swap of the [SwapRouter] contract
pub fn decode_swap(bytes: &Bytes) -> Result<U256, anyhow::Error> {
    let amount = SwapRouter::do_swapCall::abi_decode_returns(&bytes, true)?;
    Ok(amount.real_amount)
}

pub fn swap_router_bytecode() -> Result<Bytecode, anyhow::Error> {
    let bytes: Bytes = BYTECODE.parse()?;
    Ok(Bytecode::new_raw(bytes))
}